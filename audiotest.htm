<!DOCTYPE html>
<HTML>
<HEAD>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<TITLE>Audio Test</TITLE>
<LINK REL="stylesheet" TYPE="text/css" HREF="pianokeys.css">
<LINK REL="stylesheet" TYPE="text/css" HREF="drawbars.css">
<SCRIPT TYPE="text/javascript" LANGUAGE="javascript" SRC="pianokeys.js"></SCRIPT>
<SCRIPT TYPE="text/javascript" LANGUAGE="javascript" SRC="sf2-parser.js"></SCRIPT>
<SCRIPT TYPE="text/javascript" LANGUAGE="javascript" SRC="sf2-player.js"></SCRIPT>
<SCRIPT TYPE="text/javascript" LANGUAGE="javascript" SRC="tinysynth.js"></SCRIPT><!-- not needed for drawbar synth  - but testing none the less -->
<SCRIPT TYPE="text/javascript" LANGUAGE="javascript">
function el(x) { return document.getElementById(x); }

"use strict";

function recordPlaybackObject() {
	this.notes = [ ];		// a note is an array of objects with properties delta and midiMessage.
	this.startRecording = function() { this.notes = [ ]; }
}

function insertDrawbars(destDiv, instrumentObject) {
	//--- inserts drawbars into a Div to control an instrument's harmonics
	var ndb = instrumentObject.getNumDrawbars();
	for (var i = 0; i < ndb; i++) {
		var setupDrawbar = function(db,ndb) {
			dbl = ["16'","5<sup>1/3</sup>'","8'","4'","2<sup>2/3</sup>'","2","1<sup>3/5</sup>'","1<sup>1/3</sup>'","1'"];
			var newDrawbar = document.createElement("input");
			newDrawbar.type = "range";
			newDrawbar.className = "drawbar";
			newDrawbar.min = 0; newDrawbar.max = 8;
			newDrawbar.value = instrumentObject.getDrawbarDefault(ndb-db-1);
			newDrawbar.addEventListener("change", function(evt) {
				instrumentObject.setDrawbar(ndb-db-1, parseInt(newDrawbar.value,10), 0);
			});
			destDiv.appendChild(newDrawbar);
			var drawbarLabel = document.createElement("span"); drawbarLabel.innerHTML = dbl[ndb-db-1];
			var drawbarBr = document.createElement("br"); destDiv.appendChild(drawbarLabel); destDiv.appendChild(drawbarBr);
		};
		setupDrawbar(i,ndb);
	}
}

function insertEnvelope(destDiv, instrumentObject) {
	//--- draws the envelope controls
	var ienv = instrumentObject.getEnvelopeObject();
	var addParameter = function(parmName, minValue, maxValue, label) {
		var newSlider = document.createElement("input"); newSlider.type = "range";
		newSlider.className = "other-slider";
		newSlider.min = minValue; newSlider.max = maxValue; newSlider.value = ienv[parmName];
		var sliderLabel = document.createElement("span"); sliderLabel.innerText = label;
		var sliderBr = document.createElement("br");
		newSlider.addEventListener("change", function(evt) {
			instrumentObject.setEnvelope(parmName, parseInt(newSlider.value,10));
		});
		destDiv.appendChild(newSlider); destDiv.appendChild(sliderLabel); destDiv.appendChild(sliderBr);
	};
	var maxDelay = 1000;		// max delay for an envelope time parameter is 1s
	addParameter("a",0,maxDelay,"Attack");
	addParameter("h",0,maxDelay,"Hold");
	addParameter("d",0,maxDelay,"Decay");
	addParameter("s",0,100,"Sustain (%Max)");
	addParameter("r",0,maxDelay*4,"Release");		// Release allows much longer time configuration to make ringing sounds.
	addParameter("expFlag",0,1,"Exponential");
}

function insertGeneralControls(destDiv, instrumentObject) {
	//--- some more controls I like
	var addZeroOneSlider = function(name, sliderName) {
		var newSlider = document.createElement("input"); newSlider.type = "range"; newSlider.className = "other-slider";
		newSlider.min = 0; newSlider.max = 1; newSlider.step = 0.05; newSlider.value = instrumentObject["get" + sliderName]();
		var sliderLabel = document.createElement("span"); sliderLabel.innerText = name;
		var sliderBr = document.createElement("br");
		newSlider.addEventListener("change", function(evt) { instrumentObject["set"+sliderName](parseFloat(newSlider.value),0); });
		destDiv.appendChild(newSlider); destDiv.appendChild(sliderLabel); destDiv.appendChild(sliderBr);
	};
	addZeroOneSlider("Volume", "MainVolume");
	addZeroOneSlider("Tremolo Freq", "TremoloFrequency");
	addZeroOneSlider("Tremolo Gain", "TremoloGain");
	addZeroOneSlider("Pitch Bend", "PitchBend");
	addZeroOneSlider("Pitch Bend Sensitivity", "PitchBendSensitivity");
	addZeroOneSlider("Vibrato Freq", "VibratoFrequency");
	addZeroOneSlider("Vibrato Gain", "VibratoGain");
}

var adjWave;
var synth; 		// tinysynth

//--- tinysynth testing routines from tinysynth website

function loadMidi(files){
  var reader = new FileReader();
  reader.onload=function(e) {
    synth.loadMIDI(reader.result);
  };
  reader.readAsArrayBuffer(files[0]);
}
function playMidi(){
  synth.playMIDI();
}
function stopMidi(){
  synth.stopMIDI();
}
function SetProgram(p){
  synth.send([0xc0,p]);
}
function Init(){
  synth=new WebAudioTinySynth({voices:64});
  for(var i=0;i<128;++i){
    var o=document.createElement("option");
    o.innerHTML=i + ": " + synth.getTimbreName(0,i);
    document.getElementById("prog").appendChild(o);
  }
  synth.setSoundfontPath("./bsoundfonts");
  synth.loadInstruments([0,11,128],function(errObj) {	// load piano, drums, vibes
	  el("inststatus").innerText = errObj.errMsg;
  	  }, function() { el("inststatus").innerText = "Loaded successfully"; console.log("Instruments loaded."); },
	  function(i,n) { console.log("Loading Instrument " + i + " of " + n); });  // shows example of progress callback
  synth.setQuality(2);
  setInterval(function(){
    var st=synth.getPlayStatus();
    document.getElementById("status").innerHTML="Play:"+st.play+"  Pos:"+st.curTick+"/"+st.maxTick;
  },100);
}

function onLoadFunction() {
	//--- tinysynth keyboard setup
	pianoKeyDisplay.createPianoKeyboard(el("tskeyboard"),0,127,25,21,108,function(x) {
		x.keyDown = false;
		x.onNoteOn = function(noteNumber, channel, velocity, keyButton, startTime) {
			if (x.keyDown) return;	// debounce
			if (keyButton) keyButton.style.backgroundColor = "pink";
			x.keyDown = true;
			var ch = parseInt(el("kbdchannel").value,10) & 0x0F;
			synth.send([0x90 + ch,noteNumber & 0x7F,velocity & 0x7F]);
		};
		x.onNoteOff = function(noteNumber, channel, keyButton, startTime) {
			if (!x.keyDown) return; x.keyDown = false;
			if (keyButton) keyButton.style.backgroundColor = "";
			var ch = parseInt(el("kbdchannel").value,10) & 0x0F;
			synth.send([0x80 + ch,noteNumber & 0x7F,0]);
		};
	});
	Init();  // init tiny synth
	synth.setupMIDIDevices(function() { refreshMidiUI(); }, function() { el("midiinputs").innerText = "No Midi Device Support"; } )
}

var numInputCheckboxes = 0, numOutputCheckboxes = 0;

function readMidiUI() {
	// reads the checkboxes in the input/output section to set up inputs and outputs
	var inputList = [ ];
	for (var i = 0; i < numInputCheckboxes; i++) {
		if (el("midiinput_" + i).checked) inputList.push(el("midiinput_" + i).getAttribute("midiid"));
	}
	synth.setInput(inputList);
	var outputList = [ ];
	for (var i = 0; i < numOutputCheckboxes; i++) {
		if (el("midioutput_" + i).checked) outputList.push(el("midioutput_" + i).getAttribute("midiid"));
	}
	synth.setOutput(outputList);
}

function refreshMidiUI() {
	synth.refreshInputs(); synth.refreshOutputs();
	var myInputs = synth.getInputs(); var myOutputs = synth.getOutputs();
	el("midiinputs").innerHTML = ""; numInputCheckboxes = myInputs.length;
	for (var i = 0; i < myInputs.length; i++) {
		var newCheckbox = document.createElement("input"); newCheckbox.type="checkbox";
		newCheckbox.checked = (synth.selectedInputs.indexOf(myInputs[i].id) !== -1);
		newCheckbox.setAttribute("midiid",myInputs[i].id);
		newCheckbox.id = "midiinput_" + i;
		newCheckbox.addEventListener("click",readMidiUI);
		var newLabel = document.createElement("span");
		newLabel.innerText = myInputs[i].name;
		var newBr = document.createElement("br");
		el("midiinputs").appendChild(newCheckbox); el("midiinputs").appendChild(newLabel); el("midiinputs").appendChild(newBr);
	}
	var myOutputs = synth.getOutputs(); var myOutputs = synth.getOutputs();
	el("midioutputs").innerHTML = ""; numOutputCheckboxes = myOutputs.length;
	for (var i = 0; i < myOutputs.length; i++) {
		var newCheckbox = document.createElement("input"); newCheckbox.type="checkbox";
		newCheckbox.checked = (synth.selectedOutputs.indexOf(myOutputs[i].id) !== -1);
		newCheckbox.setAttribute("midiid",myOutputs[i].id);
		newCheckbox.id = "midioutput_" + i;
		newCheckbox.addEventListener("click",readMidiUI);
		var newLabel = document.createElement("span");
		newLabel.innerText = myOutputs[i].name;
		var newBr = document.createElement("br");
		el("midioutputs").appendChild(newCheckbox); el("midioutputs").appendChild(newLabel); el("midioutputs").appendChild(newBr);
	}
}

function showDrawbar() {
	el('drawbarstuff').style.display = '';	
	//--- now add event listeners for controls of the drawbar organ
	adjWave = new drawbarOrgan(synth.actx);		// the synth connects it to appropriate channel outputs when it is selected
	synth.setProgramOverride(16,[[adjWave,-1]]);   // redirect the Drawbar Organ patch to the custom instrument.
	insertDrawbars(el("drawbars"),adjWave);
	insertEnvelope(el("envelope"),adjWave);
	insertGeneralControls(el("generalcontrols"),adjWave);
	synth.setProgram(0,16);  // set to organ
	el("prog").value = 16;
}


var sf2process = null;

function loadSoundfont(files){
  var reader = new FileReader();
  reader.onload=function(e) {
	  sf2process = new sfProcessingClass();
	  sf2process.loadSF2File(reader.result);
  };
  reader.readAsArrayBuffer(files[0]);
}


</SCRIPT>
</HEAD>
<BODY ONLOAD="onLoadFunction()">
<h3>Audio Test</h3>
This is a test of various audio things.<br>
<button onclick="showDrawbar()">Show Drawbar Organ Controls</button>
<div style="display:none" id=drawbarstuff>
<table><tr><td class="control-cell">
Drawbars:<br>
<div id=drawbars class="control-container"></div>
</td><td class="control-cell">Envelope:
<div id=envelope class="control-container"></div>
</td><td class="control-cell">General Controls:<div id=generalcontrols class="control-container"></div></td></tr></table>
</div>
<hr>
Now the tiny synth, which I am expanding:<br>
Instrument Loaded Status: <span id="inststatus">Not Loaded</span><br>
<div style="width: 80vw; border: thick solid black;" id=tskeyboard></div>
<hr/>
Load MIDI file from local : <input type="file" onchange="loadMidi(this.files)"/><br/>
<button onclick="playMidi()">Play</button>
<button onclick="stopMidi()">Stop</button>
<div id="status"></div>
<br/><br/>
Loop : <input type="checkbox" onchange="synth.setLoop(this.checked)"/><br/>
MasterVol<br/>
<input type="range" value="50" min="0" max="100" oninput="synth.setMasterVol(this.value/100)"/><br/>
ReverbLev<br/>
<input type="range" value="50" min="0" max="100" oninput="synth.setReverbLev(this.value/100)"/><br/>

<br/><br/>
Quality : <select onchange="synth.setQuality(this.selectedIndex)"><option>Quality=0</option><option>Quality=1</option><option selected>Quality=2</option></select>
<br/>
Timbre : <select id="prog" onchange="SetProgram(this.selectedIndex)"></select>
<table><tr>
	<td class="control-cell">Inputs:
		<div id=midiinputs></div>
	</td>
	<td class="control-cell">Outputs:
		<div id=midioutputs></div>
	</td>
</tr></table>
Keyboard Channel: <input id=kbdchannel value="0"> 
<hr>
Now SoundFont Test:
Load Soundfont file from local : <input type="file" onchange="loadSoundfont(this.files)"/><br/>

</BODY>
</HTML>
